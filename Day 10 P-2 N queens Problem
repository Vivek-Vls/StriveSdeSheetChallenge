class Solution {
    public List<List<String>> solveNQueens(int n) {
         List<List<String>> res=new ArrayList();
         char[][] ans=new char[n][n];
        char[] ch=new char[n];
         for(int i=0;i<n;i++)
             ch[i]='.';
        for(int i=0;i<n;i++)
            ans[i]=ch.clone();
        solve(0,n,ans,res);
        return res;
        
    }
    private void solve(int col,int n, char[][] ans,List<List<String>> res)
    {
        if(col==n){
         List<String>arr=new ArrayList();
            for(int i=0;i<n;i++)
                arr.add(new String(ans[i]));
            res.add(arr);
            return;
        }
        
        for(int i=0;i<n;i++)
        {
            if(isCheck(i,col,ans,n))
            {
                ans[i][col]='Q';
                solve(col+1,n,ans,res);
                ans[i][col]='.';
            }
        }
    }
    private boolean isCheck(int row,int col,char[][] ans,int n)
    {
       int drow=row;
       int dcol=col;
        while(drow>=0&&dcol>=0)
        {
            if(ans[drow][dcol]=='Q')return false;
            drow--;
            dcol--;
        }
        drow=row;
        dcol=col;
        while(drow<n&&dcol>=0)
        {
            if(ans[drow][dcol]=='Q')return false;
            drow++;
            dcol--;
        }
        drow=row;
        dcol=col;
        while(dcol>=0)
        {
            if(ans[drow][dcol]=='Q')return false;
             dcol--;
        }
        return true;
    }
}
