class Solution {
    public List<List<Integer>> combinationSum(int[] can, int target) {
        List<List<Integer>> res =new ArrayList();
        helper(0,can,target,res,new ArrayList());
        return res;
    }
    private void helper(int i,int []arr,int target,List<List<Integer>> res,ArrayList<Integer>ans)
    {
        if(i==arr.length)
        {
            if(target==0)
            {
                res.add(new ArrayList(ans));
            }
            return;
        }
        if(target==0)
        {
            res.add(new ArrayList(ans));
            return;
        }
        if(target>=arr[i]){
            ans.add(arr[i]);
            helper(i,arr,target-arr[i],res,ans);
            ans.remove(ans.size()-1);
            }
        helper(i+1,arr,target,res,ans);
        
    }
}
