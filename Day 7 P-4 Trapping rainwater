Using two pointers *************************

class Solution {
    public int trap(int[] height) {
        int n=height.length;
        int left=0;
        int right=0;
        int l=0;int h=n-1;
        int sum=0;
        while(l<h)
        {
            if(height[l]<=height[h])
            {
                if(left<height[l])left=height[l];
                else sum+=left-height[l];
                l++;
            }
            else{
                if(right<height[h])right=height[h];
                else sum+=right-height[h];
                h--;
            } 
        }
        return sum;
        
    }
}


Second Solution using prefix max and sufix max*************************

class Solution {
    public int trap(int[] height) {
        int n=height.length;
        int []left=new int [n];
        int[] right=new int[n];
        for(int i=0;i<n;i++)
        {
            if(i==0){
                left[0]=height[0];
                right[n-1]=height[n-1];    
                    }
            else {
                 left[i]=Math.max(height[i],left[i-1]);
                 right[n-i-1]=Math.max(height[n-i-1],right[n-i]);
                 }
        }
         int total=0;
        for(int i=0;i<n;i++)
            total+=Math.min(left[i],right[i])-height[i];
        return total;
    }
}
